// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace projekt.Migrations
{
    [DbContext(typeof(DatabaseDbContext))]
    [Migration("20230421184621_Migra1")]
    partial class Migra1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projekt.Models.Firma", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("NIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Firma");
                });

            modelBuilder.Entity("projekt.Models.Konto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Haslo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PracownikId")
                        .HasColumnType("bigint");

                    b.Property<string>("TypKonta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Konto");
                });

            modelBuilder.Entity("projekt.Models.Magazyn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PojemnoscPaczek")
                        .HasColumnType("int");

                    b.Property<double>("Powierzchnia")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Magazyn");
                });

            modelBuilder.Entity("projekt.Models.Paczka", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FirmaId")
                        .HasColumnType("bigint");

                    b.Property<long>("MagazynId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PracaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Stan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wlasciciel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FirmaId");

                    b.HasIndex("MagazynId");

                    b.HasIndex("PracaId");

                    b.ToTable("Paczka");
                });

            modelBuilder.Entity("projekt.Models.Praca", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CzasRozpoczecia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CzasZakonczenia")
                        .HasColumnType("datetime2");

                    b.Property<long>("KontoId")
                        .HasColumnType("bigint");

                    b.Property<long>("WozekWidlowyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("KontoId");

                    b.HasIndex("WozekWidlowyId");

                    b.ToTable("Praca");
                });

            modelBuilder.Entity("projekt.Models.Pracownik", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("KontoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KontoId")
                        .IsUnique();

                    b.ToTable("Pracownik");
                });

            modelBuilder.Entity("projekt.Models.WozekWidlowy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataOstatniegoSerwisu")
                        .HasColumnType("datetime2");

                    b.Property<long>("MagazynId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MagazynId");

                    b.ToTable("WozekWidlowy");
                });

            modelBuilder.Entity("projekt.Models.Paczka", b =>
                {
                    b.HasOne("projekt.Models.Firma", "Firma")
                        .WithMany("Paczki")
                        .HasForeignKey("FirmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projekt.Models.Magazyn", "Magazyn")
                        .WithMany("Paczki")
                        .HasForeignKey("MagazynId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projekt.Models.Praca", null)
                        .WithMany("PrzewiezionePaczki")
                        .HasForeignKey("PracaId");

                    b.Navigation("Firma");

                    b.Navigation("Magazyn");
                });

            modelBuilder.Entity("projekt.Models.Praca", b =>
                {
                    b.HasOne("projekt.Models.Konto", "Konto")
                        .WithMany("Praca")
                        .HasForeignKey("KontoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projekt.Models.WozekWidlowy", "WozekWidlowy")
                        .WithMany("Prace")
                        .HasForeignKey("WozekWidlowyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Konto");

                    b.Navigation("WozekWidlowy");
                });

            modelBuilder.Entity("projekt.Models.Pracownik", b =>
                {
                    b.HasOne("projekt.Models.Konto", "Konto")
                        .WithOne("Pracownik")
                        .HasForeignKey("projekt.Models.Pracownik", "KontoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Konto");
                });

            modelBuilder.Entity("projekt.Models.WozekWidlowy", b =>
                {
                    b.HasOne("projekt.Models.Magazyn", "Magazyn")
                        .WithMany("WozkiWidlowe")
                        .HasForeignKey("MagazynId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Magazyn");
                });

            modelBuilder.Entity("projekt.Models.Firma", b =>
                {
                    b.Navigation("Paczki");
                });

            modelBuilder.Entity("projekt.Models.Konto", b =>
                {
                    b.Navigation("Praca");

                    b.Navigation("Pracownik")
                        .IsRequired();
                });

            modelBuilder.Entity("projekt.Models.Magazyn", b =>
                {
                    b.Navigation("Paczki");

                    b.Navigation("WozkiWidlowe");
                });

            modelBuilder.Entity("projekt.Models.Praca", b =>
                {
                    b.Navigation("PrzewiezionePaczki");
                });

            modelBuilder.Entity("projekt.Models.WozekWidlowy", b =>
                {
                    b.Navigation("Prace");
                });
#pragma warning restore 612, 618
        }
    }
}
